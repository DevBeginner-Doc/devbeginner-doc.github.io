import{_ as a,c as n,a as t,I as l,ao as s,o as h,D as e}from"./chunks/framework.DQPyDzVp.js";const p="/images/Grammer-DataStructure/java/%E5%85%B3%E9%94%AE%E5%AD%971.png",k="/images/Grammer-DataStructure/java/%E5%8F%98%E9%87%8F1.png",r="/images/Grammer-DataStructure/java/%E5%8F%98%E9%87%8F2.png",d="/images/Grammer-DataStructure/java/%E5%8F%98%E9%87%8F3.png",E="/images/Grammer-DataStructure/java/%E7%B1%BB%E5%9E%8B1.png",g="/images/Grammer-DataStructure/java/%E8%BF%90%E7%AE%97%E7%AC%A61.png",y="/images/Grammer-DataStructure/java/%E8%BF%90%E7%AE%97%E7%AC%A62.png",c="/images/Grammer-DataStructure/java/%E8%BF%90%E7%AE%97%E7%AC%A63.png",q=JSON.parse('{"title":"变量与运算符","description":"","frontmatter":{},"headers":[],"relativePath":"Grammar-DataStructure/java/var-opt.md","filePath":"Grammar-DataStructure/java/var-opt.md","lastUpdated":1718858571000}'),o={name:"Grammar-DataStructure/java/var-opt.md"},b=s('<h1 id="变量与运算符" tabindex="-1">变量与运算符 <a class="header-anchor" href="#变量与运算符" aria-label="Permalink to &quot;变量与运算符&quot;">​</a></h1><h2 id="关键字、保留字与标识符" tabindex="-1">关键字、保留字与标识符 <a class="header-anchor" href="#关键字、保留字与标识符" aria-label="Permalink to &quot;关键字、保留字与标识符&quot;">​</a></h2><h3 id="_1-关键字-keyword" tabindex="-1">1. 关键字(keyword) <a class="header-anchor" href="#_1-关键字-keyword" aria-label="Permalink to &quot;1. 关键字(keyword)&quot;">​</a></h3><ul><li>定义：被java语言赋予了特殊含义，用作专门用途的字符串（或单词）。</li><li>特点：全部的关键字都是小写字母。</li><li>官方地址：<a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html" target="_blank" rel="noreferrer">https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html</a></li><li>整理如下：（图片来自于尚硅谷《java从入门到精通(JDK17版)》） <img src="'+p+'"></li></ul><h3 id="_2-保留字" tabindex="-1">2.保留字 <a class="header-anchor" href="#_2-保留字" aria-label="Permalink to &quot;2.保留字&quot;">​</a></h3><p>在50个关键字中，其中const和goto是保留字(reserved word)</p><h3 id="_3-标识符-identifier" tabindex="-1">3.标识符(identifier) <a class="header-anchor" href="#_3-标识符-identifier" aria-label="Permalink to &quot;3.标识符(identifier)&quot;">​</a></h3><p>标识符：java中变量、方法、类等要素命名时使用的字符序列。</p><h4 style="color:#2980b9;">标识符的命名规则(不符合规则会报错)</h4><ul><li>由26个英文字母大小写、0-9、_ 或 $ 组成</li><li>数字不可以开头。</li><li>不可以使用关键字和保留字，但能包含关键字和保留字。</li><li>Java 中严格区分大小写，长度无限制。</li><li>标识符不能包含空格。</li></ul><h4 style="color:#2980b9;">标识符的命名规范(不符合规范会被鄙视)</h4><ul><li>包名：多单词组成时所有字母都小写</li><li>类名、接口名：多单词组成时，所有单词的首字母大写</li><li>变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写</li><li>常量名：所有字母都大写。多单词时每个单词用下划线连接</li></ul><h2 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-label="Permalink to &quot;变量&quot;">​</a></h2><p>变量是程序中不可或缺的组成单位，最基本的存储单元。</p><h3 id="_1-变量基础" tabindex="-1">1.变量基础 <a class="header-anchor" href="#_1-变量基础" aria-label="Permalink to &quot;1.变量基础&quot;">​</a></h3><p>变量的概念：</p><ul><li>内存中的一个存储区域，该区域的数据可以在同一类型范围内不断变化</li><li>变量的构成包含三个要素：数据类型、变量名、存储的值</li><li>Java 中变量声明的格式：数据类型 变量名 = 变量值</li></ul><p>变量的作用：</p><ul><li>用于在内存中保存数据。</li></ul><p>使用变量注意：</p><ul><li>Java 中每个变量必须先声明，后使用。</li><li>使用变量名来访问这块区域的数据。</li><li>变量的作用域：其定义所在的一对{ }内。</li><li>变量只有在其作用域内才有效。出了作用域，变量不可以再被调用。</li><li>同一个作用域内，不能定义重名的变量。</li></ul><h3 id="_2-java中变量的数据类型" tabindex="-1">2.java中变量的数据类型 <a class="header-anchor" href="#_2-java中变量的数据类型" aria-label="Permalink to &quot;2.java中变量的数据类型&quot;">​</a></h3><ul><li><strong>基本数据类型</strong> ：包括 整数类型、浮点数类型、字符类型、布尔类型。</li><li><strong>引用数据类型</strong> ：包括数组、类、接口、枚举、注解、记录。</li></ul><img src="'+k+`"><h3 id="_3-变量的使用" tabindex="-1">3.变量的使用 <a class="header-anchor" href="#_3-变量的使用" aria-label="Permalink to &quot;3.变量的使用&quot;">​</a></h3><h4 style="color:#3eb0c7;">3.1变量的声明 </h4><ul><li>格式：数据类型 变量名；</li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//例如：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//存储一个整数类型的年龄</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//存储一个小数类型的体重</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> weight;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//存储一个单字符类型的性别</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gender;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//存储一个布尔类型的婚姻状态</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> marry;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//存储一个字符串类型的姓名</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String name;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//声明多个同类型的变量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a,b,c; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//表示 a,b,c 三个变量都是 int 类型。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *  注意：变量的数据类型可以是基本数据类型，也可以是引用数据类型。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h4 style="color:#3eb0c7;"> 3.2变量的赋值 </h4><p>给变量赋值，就是把“值”存到该变量代表的内存空间中。同时，给变量赋的值类型必须与变量声明的类型一致或兼容。</p><h4 style="color:#2980b9;">变量赋值的语法格式：</h4>`,31),u=s(`<div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 举例 1：可以使用合适类型的常量值给已经声明的变量赋值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">weight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 109</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gender </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;女&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 举例 2：可以使用其他变量或者表达式给变量赋值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> z </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h4 style="color:#2980b9;">变量可以反复赋值</h4><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//先声明，后初始化</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gender;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gender </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;女&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//给变量重新赋值，修改 gender 变量的值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gender </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;男&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;gender = &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gender);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//gender = 男</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">举例 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">：也可以将变量的声明和赋值一并执行</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isBeauty </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;52Hertz&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="_4-基本数据类型介绍" tabindex="-1">4.基本数据类型介绍 <a class="header-anchor" href="#_4-基本数据类型介绍" aria-label="Permalink to &quot;4.基本数据类型介绍&quot;">​</a></h3><h4 id="_4-1-整数型-byte、short、int、long" tabindex="-1">4.1 整数型：byte、short、int、long <a class="header-anchor" href="#_4-1-整数型-byte、short、int、long" aria-label="Permalink to &quot;4.1 整数型：byte、short、int、long&quot;">​</a></h4><p>Java 各整数类型有固定的表数范围和字段长度，不受具体操作系统的影响，以保证 Java 程序的可移植性。</p><img src="`+r+'"><ul><li>定义 long 类型的变量，赋值时需要以&quot;l&quot;或&quot;L&quot;作为后缀。</li><li>Java 程序中变量通常声明为 int 型，除非不足以表示较大的数，才使用 long。</li><li>Java 的整型常量默认为 int 型。</li></ul><h4 id="_4-2-浮点型-float、double" tabindex="-1">4.2 浮点型：float、double <a class="header-anchor" href="#_4-2-浮点型-float、double" aria-label="Permalink to &quot;4.2 浮点型：float、double&quot;">​</a></h4><p>与整数类型类似，Java 浮点类型也有固定的表数范围和字段长度，不受具体操作系统的影响。</p><img src="'+d+`"><ul><li>float：单精度，尾数可以精确到 7 位有效数字。很多情况下，精度很难满足需求。</li><li>double：双精度，精度是 float 的两倍。通常采用此类型。</li><li>定义 float 类型的变量，赋值时需要以&quot;f&quot;或&quot;F&quot;作为后缀。</li><li>Java 的浮点型常量默认为 double 型。</li><li>浮点类型 float、double 的数据不适合在不容许舍入误差的金融计算领域。如果需要精确数字计算或保留指定位数的精度，需要使用 BigDecimal 类。</li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 给大家提供几个测试案列，大家可以自己猜测运行结果然后自己跑一跑试试</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//测试 1：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//0.30000000000000004</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//测试 2：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ff1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 123123123f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ff2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ff1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ff1);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ff2);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ff1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ff2);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h4 id="_4-3-字符型-char" tabindex="-1">4.3 字符型：char <a class="header-anchor" href="#_4-3-字符型-char" aria-label="Permalink to &quot;4.3 字符型：char&quot;">​</a></h4><ol><li>char 型数据用来表示通常意义上“字符”（占 2 字节）</li><li>Java 中的所有字符都使用 Unicode 编码，故一个字符可以存储一个字母，一个汉字，或其他书面语的一个字符。</li><li>字符型变量的三种表现形式:</li></ol><ul><li>形式 1：使用单引号(&#39; &#39;)括起来的单个字符。</li><li>形式 2：直接使用 Unicode 值来表示字符型常量：‘\\uXXXX’。其中，XXXX 代表一个十六进制整数。</li><li>形式 3：Java 中还允许使用转义字符‘\\’来将其后的字符转变为特殊字符型常量。</li></ul><table tabindex="0"><thead><tr><th>转字符</th><th>说明</th><th>Unicode</th></tr></thead><tbody><tr><td>\\n</td><td>换行符</td><td>\\u0009</td></tr><tr><td>\\t</td><td>制表符</td><td>\\u0022</td></tr><tr><td>\\&quot;</td><td>双引号</td><td>\\u0027</td></tr><tr><td>\\&#39;</td><td>单引号</td><td>\\u005c</td></tr><tr><td>\\\\</td><td>反斜线</td><td>\\u0008</td></tr><tr><td>\\b</td><td>退格符</td><td>\\u000d</td></tr></tbody></table><h4 id="_4-4-布尔类型-boolean" tabindex="-1">4.4 布尔类型：boolean <a class="header-anchor" href="#_4-4-布尔类型-boolean" aria-label="Permalink to &quot;4.4 布尔类型：boolean&quot;">​</a></h4><ol><li><p>boolean 类型用来判断逻辑条件，一般用于流程控制语句中：</p><ul><li>if 条件控制语句；</li><li>while 循环控制语句；</li><li>for 循环控制语句；</li><li>do-while 循环控制语句；</li></ul></li><li><p>boolean 类型数据只有两个值：true、false，无其它</p><ul><li>不可以使用 0 或非 0 的整数替代 false 和 true，这点和 C 语言不同。</li><li>拓展：Java 虚拟机中没有任何供 boolean 值专用的字节码指令，Java 语言表达所操作的 boolean 值，在编译之后都使用 java 虚拟机中的 int 数据类型来代替：true 用 1 表示，false 用 0 表示。——《java 虚拟机规范 8 版》</li></ul></li></ol><h2 id="基本数据类型变量间运算规则" tabindex="-1">基本数据类型变量间运算规则 <a class="header-anchor" href="#基本数据类型变量间运算规则" aria-label="Permalink to &quot;基本数据类型变量间运算规则&quot;">​</a></h2><p>在 Java 程序中，不同的基本数据类型（只有 7 种，不包含 boolean 类型）变量的值经常需要进行相互转换。</p><h3 id="_1-自动类型提升" tabindex="-1">1. 自动类型提升 <a class="header-anchor" href="#_1-自动类型提升" aria-label="Permalink to &quot;1. 自动类型提升&quot;">​</a></h3><p>规则：将取值范围小（或容量小）的类型自动提升为取值范围大（或容量大）的类型 。</p><img src="`+E+`"><ul><li>当把存储范围小的值（常量值、变量的值、表达式计算的结果值）赋值给了存储范围大的变量时<div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;A&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//char 自动升级为 int，其实就是把字符的编码值赋值给 i 变量了</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//int 自动升级为 double</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1234567</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//右边的整数常量值如果在 int 范围呢，编译和运行都可以通过，这里涉及到数据类型转换</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //byte bigB = 130;//错误，右边的整数常量值超过 byte 范围</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bigNum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 12345678912L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//右边的整数常量值如果超过 int 范围，必须加 L，显式表示 long 类型。否则编译不通过</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li>当存储范围小的数据类型与存储范围大的数据类型变量一起混合运算时，会按照其中最大的类型运算。<div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//混合运算，升级为 double</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li>当 byte,short,char 数据类型的变量进行算术运算时，按照 int 类型处理。<div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b2;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//编译报错，b1 + b2 自动升级为 int</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;A&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c2;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//至少需要使用 int 类型来接收</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c2);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//113</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li></ul><h3 id="_2-强制类型转换" tabindex="-1">2. 强制类型转换 <a class="header-anchor" href="#_2-强制类型转换" aria-label="Permalink to &quot;2. 强制类型转换&quot;">​</a></h3><p>将取值范围大（或容量大）的类型强制转换成取值范围小（或容量小）的类型。</p><ul><li><strong>转换格式</strong>：数据类型 1 变量名 = (数据类型 1)被强转数据值; //()中的数据类型必&lt;=变量值的数据类型</li><li>当把存储范围大的值（常量值、变量的值、表达式计算的结果值）强制转换为存储范围小的变量时，可能会损失精度或溢出。<div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.14</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//损失精度</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)d;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//损失精度</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)i;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//溢出</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li>当某个值想要提升数据类型时，也可以使用强制类型转换。这种情况的强制类型转换是没有风险的，通常省略。<div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bigger </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">j);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li>声明 long 类型变量时，可以出现省略后缀的情况。float 则不同。<div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> l1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 123L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> l2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//如何理解呢？ 此时可以看做是 int 类型的 123 自动类型提升为long 类型</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //long l3 = 123123123123; //报错，因为 123123123123 超出了 int 的范围。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> l4 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 123123123123L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //float f1 = 12.3; //报错，因为 12.3 看做是 double，不能自动转换为 float类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 12.3F</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12.3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li></ul><h3 id="_3-基本数据类型与-string-的运算" tabindex="-1">3. 基本数据类型与 String 的运算 <a class="header-anchor" href="#_3-基本数据类型与-string-的运算" aria-label="Permalink to &quot;3. 基本数据类型与 String 的运算&quot;">​</a></h3><h4 id="_3-1-string" tabindex="-1">3.1 String <a class="header-anchor" href="#_3-1-string" aria-label="Permalink to &quot;3.1 String&quot;">​</a></h4><ul><li>String 不是基本数据类型，属于引用数据类型</li><li>使用一对&quot;&quot;来表示一个字符串，内部可以包含 0 个、1 个或多个字符。</li><li>声明方式与基本数据类型类似。例如：String str = “52Hertz”;</li></ul><h4 id="_3-2-运算规则" tabindex="-1">3.2 运算规则 <a class="header-anchor" href="#_3-2-运算规则" aria-label="Permalink to &quot;3.2 运算规则&quot;">​</a></h4><ul><li>任意八种基本数据类型的数据与 String 类型只能进行连接“+”运算，且结果一定也是 String 类型。<div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//12</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    String s1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;abc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    String s2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b1;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s2);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//abc10true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //String s3 = num + b1 + s1;//编译不通过，因为 int 类型不能与 boolean 运算</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    String s4 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (b1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s1);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//编译通过</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li><li>String 类型不能通过强制类型()转换，转为其他的类型</li></ul><h2 id="运算符" tabindex="-1">运算符 <a class="header-anchor" href="#运算符" aria-label="Permalink to &quot;运算符&quot;">​</a></h2><p>运算符是一种特殊的符号，用以表示数据的运算、赋值和比较等</p><ul><li><p>运算符按照功能可以分为：算术运算符、赋值运算符、比较(或关系)运算符、逻辑运算符、位运算符、条件运算符、Lambda 运算符</p><table tabindex="0"><thead><tr><th>分类</th><th>运算符</th></tr></thead><tbody><tr><td>算术运算符（7 个）</td><td>+、-、*、/、%、++、--</td></tr><tr><td>赋值运算符（12 个）</td><td>=、+=、-=、*=、/=、%=、&gt;&gt;=、&lt;&lt;=、&gt;&gt;&gt;=、 &amp;=、</td></tr><tr><td>比较(或关系)运算符（6个）</td><td>&gt;、&gt;=、&lt;、&lt;=、==、!=</td></tr><tr><td>逻辑运算符（6 个）</td><td>&amp;、|、！、&amp;&amp;、||</td></tr><tr><td>位运算符（7 个）</td><td>&amp;、|、~、&lt;&lt;、&gt;&gt;、&gt;&gt;&gt;</td></tr><tr><td>条件运算符（1 个）</td><td>(条件表达式)?结果 1:结果 2</td></tr><tr><td>Lambda 运算符</td><td>-&gt;</td></tr></tbody></table></li><li><p>运算符按照操作个数可以分为：一元运算符（单目运算符）、二元运算符（双目运算符）、三元运算符 （三目运算符）</p><table tabindex="0"><thead><tr><th>分类</th><th>运算符</th></tr></thead><tbody><tr><td>一元运算符（单目运算符）</td><td>正号（+）、负号（-）、++、--、!、~</td></tr><tr><td>二元运算符（双目运算符）</td><td>除了一元和三元运算符剩下的都是二元运算符</td></tr><tr><td>三元运算符 （三目运算符）</td><td>(条件表达式)?结果 1:结果 2</td></tr></tbody></table></li></ul><h4 id="_1-算术运算符" tabindex="-1">1.算术运算符 <a class="header-anchor" href="#_1-算术运算符" aria-label="Permalink to &quot;1.算术运算符&quot;">​</a></h4><img src="`+g+'"><h4 id="_2-赋值运算符" tabindex="-1">2. 赋值运算符 <a class="header-anchor" href="#_2-赋值运算符" aria-label="Permalink to &quot;2. 赋值运算符&quot;">​</a></h4><table tabindex="0"><thead><tr><th>算符</th><th>符号解释</th></tr></thead><tbody><tr><td>=</td><td>当“=”两侧数据类型不一致时，可以使用自动类型转换或使用强制类型转换 原则进行处理。（支持连续赋值）</td></tr><tr><td>+=</td><td>将符号左边的值和右边的值进行相加操作，最后将结 果赋值给左边的变量</td></tr><tr><td>-=</td><td>将符号左边的值和右边的值进行相减操作，最后将结 果赋值给左边的变量</td></tr><tr><td>*=</td><td>将符号左边的值和右边的值进行相乘操作，最后将结 果赋值给左边的变量</td></tr><tr><td>/=</td><td>将符号左边的值和右边的值进行相除操作，最后将结 果赋值给左边的变量</td></tr><tr><td>%=</td><td>将符号左边的值和右边的值进行取余操作，最后将结 果赋值给左边的变量</td></tr></tbody></table><h4 id="_3-比较运算符" tabindex="-1">3.比较运算符 <a class="header-anchor" href="#_3-比较运算符" aria-label="Permalink to &quot;3.比较运算符&quot;">​</a></h4><img src="'+y+'"><h4 id="_4-条件运算符" tabindex="-1">4.条件运算符 <a class="header-anchor" href="#_4-条件运算符" aria-label="Permalink to &quot;4.条件运算符&quot;">​</a></h4><ul><li>格式：(条件表达式)?表达式1:表达式2</li><li>说明：条件表达式是 boolean 类型的结果，根据 boolean 的值选择表达式 1 或表达式 2</li></ul><img src="'+c+'"><h2 id="运算符优先级" tabindex="-1">运算符优先级 <a class="header-anchor" href="#运算符优先级" aria-label="Permalink to &quot;运算符优先级&quot;">​</a></h2><p>运算符有不同的优先级，所谓优先级就是在表达式运算中的运算符顺序</p><table tabindex="0"><thead><tr><th style="text-align:left;">优先级</th><th>运算符说明</th><th>Java 运算符</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td>括号</td><td>()、[]、{}</td></tr><tr><td style="text-align:left;">2</td><td>正负号</td><td>+、-</td></tr><tr><td style="text-align:left;">3</td><td>单元运算符</td><td>++、--、~、！</td></tr><tr><td style="text-align:left;">4</td><td>乘法、除法、求余</td><td>*、/、%</td></tr><tr><td style="text-align:left;">5</td><td>加法、减法</td><td>+、-</td></tr><tr><td style="text-align:left;">6</td><td>移位运算符</td><td>&lt;&lt;、&gt;&gt;、&gt;&gt;&gt;</td></tr><tr><td style="text-align:left;">7</td><td>关系运算符</td><td>&lt;、&lt;=、&gt;=、&gt;、instanceof</td></tr><tr><td style="text-align:left;">8</td><td>等价运算符</td><td>==、!=</td></tr><tr><td style="text-align:left;">9</td><td>按位与</td><td>&amp;</td></tr><tr><td style="text-align:left;">10</td><td>按位异或</td><td>^</td></tr><tr><td style="text-align:left;">11</td><td>按位或</td><td>|</td></tr><tr><td style="text-align:left;">12</td><td>条件与</td><td>&amp;&amp;</td></tr><tr><td style="text-align:left;">13</td><td>条件或</td><td>||</td></tr><tr><td style="text-align:left;">14</td><td>三元运算符</td><td></td></tr><tr><td style="text-align:left;">15</td><td>赋值运算符</td><td>=、+=、-=、*=、/=、%=</td></tr><tr><td style="text-align:left;">17</td><td>位赋值运算符</td><td>&amp;=、=、&lt;&lt;=、&gt;&gt;=、&gt;&gt;&gt;=</td></tr></tbody></table>',48);function m(F,A,D,v,C,_){const i=e("NolebaseGitChangelog");return h(),n("div",null,[b,t(" 变量名 = 值； "),u,l(i)])}const x=a(o,[["render",m]]);export{q as __pageData,x as default};
