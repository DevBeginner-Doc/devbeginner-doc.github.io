import{_ as i,c as e,am as r,G as l,B as n,o as t}from"./chunks/framework.K3xJXeUl.js";const o="/images/Grammer-DataStructure/java/hw1.png",p="/images/Grammer-DataStructure/java/hw2.png",c="/images/Grammer-DataStructure/java/hw3.png",h="/images/Grammer-DataStructure/java/hw4.png",d="/images/Grammer-DataStructure/java/hw5.png",m="/images/Grammer-DataStructure/java/hw6.png",u="/images/Grammer-DataStructure/java/hw7.png",f=JSON.parse('{"title":"初步体验","description":"","frontmatter":{},"headers":[],"relativePath":"Grammar-DataStructure/java/primer.md","filePath":"Grammar-DataStructure/java/primer.md","lastUpdated":1717955412000}'),b={name:"Grammar-DataStructure/java/primer.md"};function g(k,a,v,E,j,_){const s=n("NolebaseGitChangelog");return t(),e("div",null,[a[0]||(a[0]=r('<h1 id="初步体验" tabindex="-1">初步体验 <a class="header-anchor" href="#初步体验" aria-label="Permalink to &quot;初步体验&quot;">​</a></h1><p>在这里，将带领大家通过记事本开发我们的第一个java程序<code>HelloWorld</code>，目的是为了熟悉java开发的整个流程，在实际开发中，我们可以通过idea、eclipse等工具使我们的开发流程大大简化<br></p><p style="color:red;">为保证大家初步体验的成功，请大家先严格按照事例中的内容完成</p><h2 id="开发步骤" tabindex="-1">开发步骤 <a class="header-anchor" href="#开发步骤" aria-label="Permalink to &quot;开发步骤&quot;">​</a></h2><p>Java 程序开发三步骤：<strong>编写</strong>、<strong>编译</strong>、<strong>运行</strong>。</p><ul><li>将 Java 代码编写到扩展名为 .java 的源文件中</li><li>通过 javac.exe 命令对该 java 文件进行编译，生成一个或多个字节码文件</li><li>通过 java.exe 命令对生成的 class 文件进行运行 <br> <br><img src="'+o+'"></li></ul><h2 id="编写" tabindex="-1">编写 <a class="header-anchor" href="#编写" aria-label="Permalink to &quot;编写&quot;">​</a></h2><ol><li><p>在自选目录下新建文本文件，<a href="#wenjianming">完整的文件名</a>完整的文件名修改为HelloWorld.java，其中文件名为 HelloWorld，后缀名必须为.java。 <img src="'+p+'"><br></p></li><li><p>用记事本打开文件准备编写</p></li><li><p>在文件中输入如下代码，并且保存：<br><br><img src="'+c+'"><br></p></li></ol><h4 id="wenjianming">提醒:如何查看完整的文件名：</h4><br><br><img src="'+h+'"><br><h2 id="编译" tabindex="-1">编译 <a class="header-anchor" href="#编译" aria-label="Permalink to &quot;编译&quot;">​</a></h2><p>第一个 HelloWord 源程序就编写完成了，但是这个文件是程序员编写的，JVM是看不懂的，也就不能运行，因此我们必须将编写好的 Java 源文件 编译成JVM 可以看懂字节码文件 ，也就是.class 文件</p><ol><li>在该源程序目录中，在地址栏处输入 <code>cmd</code><br><br><img src="'+d+'"><br></li><li>输入命令：javac Java 源文件名.后缀名 java，即 <code>javac HelloWorld.java</code>，编译成功后，命令行没有任何提示，打开文件夹，发现多了一个.class文件,该文件就是编译后的文件，是 Java 的可运行文件，称为字节码文件，有了字节码文件，就可以运行程序了。 <br><br><img src="'+m+'"><br></li></ol><h2 id="运行" tabindex="-1">运行 <a class="header-anchor" href="#运行" aria-label="Permalink to &quot;运行&quot;">​</a></h2><ol><li>再次回到源文件夹，在命令框输入<code>cmd</code>开始命令框</li><li>输入命令：java 主类名字，即<code>java HelloWorld</code>,可以看到命令框打印出了HelloWorld 。 <br><br><img src="'+u+`"></li></ol><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h2><ol><li><strong>Java 程序的结构与格式</strong></li></ol><ul><li>结构</li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">类{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  方法{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    语句;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>格式<br> （1）每一级缩进一个 Tab 键<br> （2）{}的左半部分在行尾，右半部分单独一行，与和它成对的&quot;{&quot;的行首对齐</li></ul><ol start="2"><li><strong>java程序的入口</strong><br><br> Java 程序的入口是 main 方法</li></ol><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] args){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol start="3"><li><strong>两种常见的输出语句</strong></li></ol><ul><li>换行输出语句：输出内容，完毕后进行换行，格式下： <code>System.out.println(输出内容);</code></li><li>直接输出语句：输出内容，完毕后不做任何处理，格式如下<code>System.out.print(输出内容);</code></li></ul><ol start="4"><li><strong>源文件名和类名</strong><br> （1）源文件名是否必须与类名一致？public 呢？<br>  如果这个类不是 public，那么源文件名可以和类名不一致。但是不便于代码维护。 如果这个类是 public，那么要求源文件名必须与类名一致。否则编译报错。 我们建议大家，不管是否是 public，都与源文件名保持一致，而且一个源文件尽量只 写一个类，目的是为了好维护。<br><br> （2）一个源文件中是否可以有多个类？public 呢？<br>  一个源文件中可以有多个类，编译后会生成多个.class 字节码文件。 但是一个源文件只能有一个 public 的类。</li></ol>`,28)),l(s)])}const D=i(b,[["render",g]]);export{f as __pageData,D as default};
