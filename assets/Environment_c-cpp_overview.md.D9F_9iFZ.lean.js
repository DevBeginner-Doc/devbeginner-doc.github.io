import{_ as a,c as f,am as o,G as c,o as s,B as n}from"./chunks/framework.GyrKTBAB.js";const u=JSON.parse('{"title":"概述","description":"","frontmatter":{},"headers":[],"relativePath":"Environment/c-cpp/overview.md","filePath":"Environment/c-cpp/overview.md","lastUpdated":1717929923000}'),r={name:"Environment/c-cpp/overview.md"};function i(l,e,p,d,C,m){const t=n("NolebaseGitChangelog");return s(),f("div",null,[e[0]||(e[0]=o('<h1 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h1><p>  你说的对，但 C 是丹尼斯·里奇（Dennis Ritchie）于1972年在贝尔实验室创造出的一门面向过程的高级程序设计语言，而 C++ 则是本贾尼·斯特劳斯特卢普（Bjarne Stroustrup）于1979<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>年在C的基础上引入了“类”的概念而创造出的一门面向过程的语言。</p><p>   C++ 是 C 的“超集”，也就是说所有的 C 程序都是合法<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>的 C++ 程序。因为这个原因<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>，很多人（或者说很多场合）都将 C 和 C++ 放在一起讲，或者用“C/C++”这样的表述方式。这并没有什么不妥，只是要知道它们两个依旧是有区别的，是两门不同的语言。</p><p>  基本上可以确定的是，如果一个IDE支持 C 语言，那么它大概率会支持 C++ <sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup>，反之亦然。这两种语言的配置方式相差无几，但值得注意的是， C 语言和 C++ 语言使用的编译器往往不同。我们常用<code>gcc</code>（GNU C Compiler）<sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup>来编译 C，而用<code>g++</code>（GNU C++ Compiler）来编译 C++<sup class="footnote-ref"><a href="#fn6" id="fnref6">[6]</a></sup>。</p><p>  仍然感到迷茫？没关系，我们会在下面的章节更加详细地介绍各种适合C/C++语言的IDE以及配置方法。</p>',5)),c(t),e[1]||(e[1]=o('<hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://baike.baidu.com/item/C++/99272" target="_blank" rel="noreferrer">百度百科</a>上的“上线时间”如此。“C++”这一名称是在1983年敲定的。 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>符合语法。 <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p>也就是说还有其他原因。详见<a href="./relationship.html">此处</a>。 <a href="#fnref3" class="footnote-backref">↩︎</a></p></li><li id="fn4" class="footnote-item"><p>需要经过合理的设置。 <a href="#fnref4" class="footnote-backref">↩︎</a></p></li><li id="fn5" class="footnote-item"><p>有人会说 GCC 指的是 GNU Compiler Collection（GNU编译器套装），这种说法也没有问题。最初的 GCC 只支持编译 C 语言，后来的新版本可以编译包括 Fortran、Pascal、Objective-C、Java、Ada、Go 在内的诸多语言。也就是说，<code>gcc</code>和<code>g++</code>都是 GCC 的一部分。 <a href="#fnref5" class="footnote-backref">↩︎</a></p></li><li id="fn6" class="footnote-item"><p><code>g++</code>是基于<code>gcc</code>的一部分，它们共享同一个编译器框架和大部分底层代码。可以理解为<code>g++</code>是<code>gcc</code>的一个特化版本，专门为 C++ 语言做了优化和调整。<code>gcc</code>默认处理 C 语言文件，而<code>g++</code>默认处理 C++ 语言文件；使用<code>g++</code>时，编译器会自动链接 C++ 标准库，而使用<code>gcc</code>编译 C++ 代码时，需要手动链接 C++ 标准库。同时，<code>g++</code>对 C++ 代码的处理更加准确，尤其是在处理模板、命名空间和其他 C++ 特有特性时。 <a href="#fnref6" class="footnote-backref">↩︎</a></p></li></ol></section>',2))])}const g=a(r,[["render",i]]);export{u as __pageData,g as default};
