import{_ as n,c as e,I as o,ao as i,o as t,D as a}from"./chunks/framework.DQPyDzVp.js";const p="/images/Environment/vs-code/icon.png",l="/images/Environment/vs-code/vsc_download.png",r="/images/Environment/vs-code/vsc1.png",c="/images/Environment/vs-code/vsc2.png",d="/images/Environment/vs-code/vsc3.png",g="/images/Environment/vs-code/vsc4.png",m="/images/Environment/vs-code/vsc5.png",v="/images/Environment/vs-code/vsc6_%E8%BF%90%E8%A1%8C.png",h="/images/Environment/vs-code/msys2_1.png",_="/images/Environment/vs-code/msys2_2.png",u="/images/Environment/vs-code/msys2_3.png",k="/images/Environment/vs-code/msys2_4_%E5%8D%A150.png",b="/images/Environment/vs-code/msys2_5.png",C="/images/Environment/vs-code/msys2_icon.png",y="/images/Environment/vs-code/msys2_6.png",S="/images/Environment/vs-code/msys2_7.png",E="/images/Environment/vs-code/msys2_8.png",V="/images/Environment/vs-code/msys2_9.png",f="/images/Environment/vs-code/msys2_10.png",z="/images/Environment/vs-code/env_path_2.png",q="/images/Environment/vs-code/env_path_3.png",F="/images/Environment/vs-code/env_path_1.png",w="/images/Environment/vs-code/env_path_4.png",x="/images/Environment/vs-code/env_path_5.png",W="/images/Environment/vs-code/env_path_6.png",D="/images/Environment/vs-code/env_path_7.png",P="/images/Environment/vs-code/env_vsc_1.png",M="/images/Environment/vs-code/env_vsc_2.png",A="/images/Environment/vs-code/env_vsc_3.png",B="/images/Environment/vs-code/env_vsc_4.png",T="/images/Environment/vs-code/env_vsc_5.png",Y="/images/Environment/vs-code/env_vsc_6.png",G="/images/Environment/vs-code/env_vsc_7.png",N="/images/Environment/vs-code/env_vsc_8.png",I="/images/Environment/vs-code/env_vsc_9.png",H="/images/Environment/vs-code/env_vsc_10.png",R="/images/Environment/vs-code/env_vsc_11.png",ss=JSON.parse('{"title":"Visual Studio Code","description":"","frontmatter":{},"headers":[],"relativePath":"Environment/c-cpp/vs-code.md","filePath":"Environment/c-cpp/vs-code.md","lastUpdated":1721499092000}'),U={name:"Environment/c-cpp/vs-code.md"},L=i('<div class="warning custom-block"><p class="custom-block-title">🚧WARNING</p><p>本条目仍在积极施工中，可能存在遗漏或不完善的地方</p></div><h1 id="visual-studio-code" tabindex="-1">Visual Studio Code <a class="header-anchor" href="#visual-studio-code" aria-label="Permalink to &quot;Visual Studio Code&quot;">​</a></h1><p><img src="'+p+'" alt="vscode_icon | origional repo: https://github.com/Aikoyori/ProgrammingVTuberLogos" loading="lazy"></p><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>Visual Studio Code（简称 VSCode 或 VSC）是由微软开发的开源、免费、轻量且拥有跨平台支持的代码编辑器，这意味着无论是Windows, MacOS 还是 Linux 平台上你都可以运行VScode。</p><p>除此之外，VSCode还拥有强大的代码自动补全，丰富的插件扩展和多语言支持，可自定义程度也相对较高，因此深受广大开发者喜爱。</p><p>这篇文档将带大家熟悉VSCode的安装和配置（以Windows 11家庭中文版系统为例），并在VSCode里编译运行自己的第一个程序。</p><h2 id="下载" tabindex="-1">下载 <a class="header-anchor" href="#下载" aria-label="Permalink to &quot;下载&quot;">​</a></h2><h3 id="官网下载" tabindex="-1">官网下载 <a class="header-anchor" href="#官网下载" aria-label="Permalink to &quot;官网下载&quot;">​</a></h3><p>进入 <a href="https://code.visualstudio.com/Download" target="_blank" rel="noreferrer">Visual Studio Code 下载官网</a>，按下图的指示点击按钮下载</p><p><img src="'+l+'" alt="vscode-download" loading="lazy"></p><h3 id="本站下载" tabindex="-1">本站下载 <a class="header-anchor" href="#本站下载" aria-label="Permalink to &quot;本站下载&quot;">​</a></h3><p>点击此处下载</p><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><h3 id="一切的开始——安装vscode" tabindex="-1">一切的开始——安装VSCode <a class="header-anchor" href="#一切的开始——安装vscode" aria-label="Permalink to &quot;一切的开始——安装VSCode&quot;">​</a></h3><p>安装程序下载完成后，双击打开，之后按照安装程序的指引完成安装。<br> 在这里首先勾选 <em><strong>“我同意此协议”</strong></em></p><p><img src="'+r+'" alt="vscode installation  | image_1-1-1" loading="lazy"></p><p>建议将VSCode安装至空间充足的磁盘上，在这里不建议直接安装至C盘。 <s>除非你的电脑只有C盘</s></p><p>推荐的安装姿势是在你空间充足的磁盘（如D盘）内新建一个文件夹，为它起一个名字（例如：vscode），然后将VSCode安装在你新建的文件夹内，这样一来，你的VSCode安装路径应当看起来是这样的：</p><p><code>D:/vscode/</code> 或者 <code>D:/Software/vscode/</code></p><p>前者或后者并没有什么区别，只取决于你个人的喜好。</p><p><strong>“...等一下，我的D盘里没有 <code>Software</code> 这个文件夹！？”</strong><br><em><strong>——没有关系，新建一个就好，这并不是什么问题。</strong></em></p><p>另外需要特别注意的是，安装路径中 <strong>最 好 不 要 出 现 中 文</strong>，例如 <code>D:/VS扣得</code> 就是一个非常差劲的安装路径名称，使用这样的安装路径可能会导致一些意料之外的错误。</p><blockquote><p>顺带一提，我个人也不太喜欢安装路径中出现空格，所以我会把默认的安装文件夹名“Microsoft VS Code” 换成 “vscode”，实际的安装中，你可以按照自己的喜好来自由命名VSCode所安装在的文件夹。</p></blockquote><p><img src="'+c+'" alt="vscode installation | image_1-1-2" loading="lazy"></p><p>这一步会在你的开始菜单创建一个快捷方式，如果你不想要在开始菜单创建快捷方式，勾选下方的 <em><strong>“不创建开始菜单文件夹”</strong></em> 即可。</p><p><img src="'+d+'" alt="vscode installation | image_1-1-3" loading="lazy"></p><p>接下来勾选下图中的必要选项，同样地，如果你不想在桌面上创建快捷方式，取消勾选 <em><strong>“创建桌面快捷方式”</strong></em> 即可。</p><p><img src="'+g+'" alt="vscode installation | image_1-1-4" loading="lazy"></p><p>最后在开始正式安装前，目测检查一下安装信息是否有误</p><p><img src="'+m+'" alt="vscode installation | image_1-1-5" loading="lazy"></p><p>如果没有什么其他问题，点击安装并耐心等待几分钟，vscode本体就在你的电脑上安装好了。</p><p><img src="'+v+'" alt="vscode installation | image_1-1-6" loading="lazy"></p><p>安装完成之后勾选 <em><strong>“运行 Visual Studio Code”</strong></em> 并点击完成，不出意外的话，你就可以看到VSCode的欢迎界面了，VSCode本体的安装也就此完成。</p><h3 id="等等-还没完呢-——下载并安装mingw-w64" tabindex="-1">...等等，还没完呢！——下载并安装MinGW-W64 <a class="header-anchor" href="#等等-还没完呢-——下载并安装mingw-w64" aria-label="Permalink to &quot;...等等，还没完呢！——下载并安装MinGW-W64&quot;">​</a></h3><p>还记得我们在开头说过什么吗？VSCode只是一个<strong>代码编辑器</strong>而已，并不是一个完整的<strong>IDE（集成开发环境）</strong>，换句话说，你刚刚安装好的VSCode其实只是一个高级一点的记事本，并不具备编译和调试程序的能力等等。要想在VSCode里进行C++程序的编写，你还需要安装一些编译工具，在Windows平台上，我们一般使用 <em><strong>MinGW-W64</strong></em>作为我们的编译工具集。</p><p><strong>“...你说得对，但是怎么安装呢？”</strong></p><p>首先下载<a href="https://github.com/msys2/msys2-installer/releases/download/2024-05-07/msys2-x86_64-20240507.exe" target="_blank" rel="noreferrer">MSYS2</a>的安装程序。</p><p><strong>“...MSYS2？那又是什么？”</strong></p><div class="info custom-block"><p class="custom-block-title">📋Tips</p><p><em>MSYS2</em> 是一个独立于操作系统的轻量级开发环境，主要用于在 Windows 上提供类似 Unix 的体验。它是 &quot;<strong>M</strong>inimal <strong>SYS</strong>tem <strong>2</strong>&quot; 的缩写，继承自 <em>MinGW</em> 和 <em>MSYS</em> 项目。</p></div><p>上面是对MSYS2的一段简单描述，不过我们并不需要知道那么多，只需要知道它可以帮我们安装好我们需要的<strong>MinGW-W64工具集</strong>，这就够了。</p><p>然后双击打开安装程序，按照指引完成MSYS2的安装</p><p><img src="'+h+'" alt="msys2 installation | image_1-2-1" loading="lazy"></p><p>同样地，推荐安装在空间充足的磁盘（如D盘），安装路径中最好不要出现中文名称。</p><p><img src="'+_+'" alt="msys2 installation | image_1-2-2" loading="lazy"></p><p>在开始菜单中创建一个快捷方式，并且你不能取消这一步。 <s>是的，你没得选</s></p><p><img src="'+u+'" alt="msys2 installation | image_1-2-3" loading="lazy"></p><p>耐心等待，放轻松，由于大陆的特色网络环境，出现卡50%的情况是正常的，一般只需多等几分钟即可。</p><p><img src="'+k+'" alt="msys2 installation | image_1-2-4" loading="lazy"></p><p>安装结束后，<strong>勾选 <code>Run MSYS2 now</code> 这个选项</strong>，然后再点击Finish按钮，这样在关闭安装程序后会自动弹出一个MSYS2的终端窗口。</p><p><img src="'+b+'" alt="msys2 installation | image_1-2-5" loading="lazy"></p><p><strong>“完蛋了！我好像忘记勾那个框框了！”</strong><br><em>——不用太慌张，如果忘记勾选的话，直接在Windows的搜索栏里搜索 <strong>“MSYS2 UCRT64”</strong> 并运行即可，这同样会呼出MSYS2的终端窗口</em></p><p><img src="'+C+'" alt="msys2 installation | msys2_icon" loading="lazy"></p><p>在弹出的窗口中，输入下面的指令来安装MinGW-W64工具集：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pacman</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --needed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> base-devel</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mingw-w64-ucrt-x86_64-toolchain</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+y+'" alt="msys2 installation | image_1-2-6" loading="lazy"></p><p>然后在终端中按回车键接受默认选项</p><p><img src="'+S+'" alt="msys2 installation | image_1-2-7" loading="lazy"></p><p>最后在终端中输入Y并按回车键（或者直接按回车键）来确认安装</p><p><img src="'+E+'" alt="msys2 installation | image_1-2-8" loading="lazy"></p><p>依旧耐心等待即可。</p><p><img src="'+V+'" alt="msys2 installation | image_1-2-9" loading="lazy"></p><p>这是安装完成之后的样子，确认所有组件都已经安装完毕后，你就可以安全关闭终端窗口了，MINGW-W64至此也就安装完毕。</p><p><img src="'+f+'" alt="msys2 installation | image_1-2-10" loading="lazy"></p><h2 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h2><h3 id="必要的准备——配置环境变量" tabindex="-1">必要的准备——配置环境变量 <a class="header-anchor" href="#必要的准备——配置环境变量" aria-label="Permalink to &quot;必要的准备——配置环境变量&quot;">​</a></h3><p>首先让我们打开 Windows设置<br> 找到 <em><strong>系统-&gt;系统信息-&gt;高级系统设置</strong></em> 并点击</p><p><img src="'+z+'" alt="env path settings" loading="lazy"></p><p>然后点击进入 <em><strong>高级-&gt;环境变量</strong></em></p><p><img src="'+q+'" alt="env path settings" loading="lazy"></p><div class="info custom-block"><p class="custom-block-title">📋Tips</p><p>或者更简单一些 你也可以直接在Windows的搜索栏中搜索 <em><strong>“编辑系统环境变量”</strong></em> 并打开，同样可以打开上图所示的窗口。</p><p><img src="'+F+'" alt="env path settings" loading="lazy"></p></div><p>在下方的 <em><strong>“系统变量”</strong></em> 中找到 <em><strong>“Path”</strong></em>，直接双击进入编辑，或者单击之后再点击下方的 <em><strong>“编辑”</strong></em></p><p><img src="'+w+'" alt="env path settings" loading="lazy"></p><p>然后点击 <em><strong>“新建”</strong></em>，并输入你的工具集所在目录的路径，例如，如果你将MSYS2默认安装在了C盘，默认的路径应该为 <code>C:\\msys64\\ucrt64\\bin\\</code></p><p><img src="'+x+'" alt="env path settings" loading="lazy"></p><p>本教程示例中的目录是 <code>D:\\Software\\msys64\\ucrt64\\bin\\</code> 如果你在安装时选择了其他的安装目录，你就需要填写你当时安装mingw64的目录</p><p>总之，你需要输入的东西看起来应该是像 <code>X:\\xxx\\...\\ucrt64\\bin\\</code> 的样子</p><p><img src="'+W+'" alt="env path settings" loading="lazy"></p><p>最后，点击 <em><strong>“确定”</strong></em> 来保存环境变量配置</p><p>然后打开cmd或powershell，依次输入 <code>gcc --version</code> ，<code>g++ --version</code>，<code>gdb --version</code> 来测试环境变量是否配置正常</p><p><img src="'+D+'" alt="env path settings" loading="lazy"></p><p>如果你的终端里像上图所示显示了gcc，g++，gdb的版本信息，那么很好，你已经成功地把我们所需的环境变量配置完毕了。</p><h3 id="同样不可或缺——配置vscode" tabindex="-1">同样不可或缺——配置VSCode <a class="header-anchor" href="#同样不可或缺——配置vscode" aria-label="Permalink to &quot;同样不可或缺——配置VSCode&quot;">​</a></h3><p>接下来，让我们打开先前安装好的VSCode，VSCode会自动打开一个引导教学界面，这篇文档中我们只会在这个界面中进行一些必要的设置</p><div class="info custom-block"><p class="custom-block-title">📋Tips</p><p>在跟随本文档配置完成后，如果还想要更进一步查看欢迎页面的其他选项，可以使用快捷键 <em><strong>“Ctrl+Shift+P”</strong></em> 打开命令面板，输入 <em><strong>“Welcome: Walkthrough”</strong></em> 来重新选择并打开VSCode的引导教学界面</p></div><p>首先可以选择一个你喜欢的主题，VSCode目前有四种预设好的官方主题可供选择</p><p><img src="'+P+'" alt="env vscode settings" loading="lazy"></p><p>进入下一步并点击 <em><strong>“Browse Language Extentions”</strong></em></p><p>然后在左侧弹出的市场中安装 <em><strong>“C/C++ Extention Pack”</strong></em> 这个扩展</p><p><img src="'+M+'" alt="env vscode settings" loading="lazy"></p><div class="info custom-block"><p class="custom-block-title">📋Tips</p><p>如果想要再次进入扩展市场，只需要点击左侧菜单栏的 <em><strong>“扩展”</strong></em> 图标即可</p><p>上图中左侧菜单各个图标分别为：</p><ul><li><strong>上方</strong><ul><li>资源管理器</li><li>搜索</li><li>源代码管理</li><li>运行和调试</li><li><em><strong>扩展 &lt;-</strong></em></li></ul></li><li><strong>下方</strong><ul><li>账户</li><li>管理</li></ul></li></ul></div><p>VSCode默认为英文界面，如果需要中文界面，同样可以在扩展市场中安装<br> 在扩展市场中搜索 <em><strong>“Chinese (Simplified)”</strong></em> 来找到并安装简体中文语言包，重启VSCode后就可以将VSCode切换到中文界面</p><p><img src="'+A+'" alt="env vscode settings" loading="lazy"></p><p>接下来让我们回到扩展界面，删除搜索框中的搜索内容，此时扩展商店中会列出我们已经安装好的扩展</p><p>然后找到 <em><strong>“C/C++”</strong></em> 这个扩展</p><p>点击右边的齿轮图标进入扩展设置</p><p><img src="'+B+'" alt="env vscode settings" loading="lazy"></p><p>找到 <em><strong>用户</strong></em> 设置中的 <em><strong>“C_Cpp &gt; Default: Compiler Path”</strong></em>，点击 <em><strong>“在 settings.json 中编辑”</strong></em></p><p><img src="'+T+'" alt="env vscode settings" loading="lazy"></p><p>如图所示，输入你的工具集所在目录的路径</p><p><img src="'+Y+'" alt="env vscode settings" loading="lazy"></p><div class="info custom-block"><p class="custom-block-title">📋Tips</p><p>这一步所填写的路径与先前我们配置环境变量时所填写的的路径相同，只不过需要注意的是，在VSCode的配置文件中，分隔目录层级的符号为两个反斜杠 <code>\\\\</code> 或者一个正斜杠 <code>/</code> ，而不是一个反斜杠 <code>\\</code></p><p>也就是说，你需要填写的路径应该长这样：<br><code>D:\\\\Software\\\\msys64\\\\ucrt64\\\\bin</code><br> 或者这样：<br><code>D:/Software/msys64/ucrt64/bin</code><br> 二者都是可以的，你可以根据个人喜好选择一种方法填写。</p></div><p>是时候喝口水，伸个懒腰，然后休息一下了</p><p>至此配置部分已经全部结束，接下来我们终于可以愉快地使用VSCode来编写我们的第一个C++程序了。</p><h2 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h2><h3 id="记得从文件夹里开-——在vsc里编写你的第一个c-程序" tabindex="-1">记得从文件夹里开！——在VSC里编写你的第一个C++程序 <a class="header-anchor" href="#记得从文件夹里开-——在vsc里编写你的第一个c-程序" aria-label="Permalink to &quot;记得从文件夹里开！——在VSC里编写你的第一个C++程序&quot;">​</a></h3><p>在VScode中编写代码时，我们需要创建一个 <em><strong>文件夹</strong></em> 来存放我们的 <em><strong>源代码</strong></em> 和 <em><strong>项目配置文件</strong></em></p><p>让我们提前创建好一个文件夹，命名为“HelloWorld”</p><div class="warning custom-block"><p class="custom-block-title">🚧WARNING</p><p>在VSCode中，你的项目文件夹所在路径中 <strong>一 定 不 能 有 中 文 存 在</strong>，类似 <code>C:/Users/Documents/Code/你好世界</code> 或者是 <code>C:/Users/Documents/代码/HelloWorld</code> 的项目路径都会导致你的程序在VSCode中无法编译运行，在使用VSCode时请务必牢记这点</p></div><p><img src="'+G+'" alt="env vscode settings" loading="lazy"></p><p>然后在VSCode中选择 <em><strong>打开文件夹</strong></em>，找到我们新创建的项目文件夹并打开它</p><p><img src="'+N+`" alt="env vscode settings" loading="lazy"></p><p>现在，新建一个名为 <em><strong>“helloworld.cpp”</strong></em> 的文件，开始为这份C++源代码注入灵魂：</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;iostream&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello World!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Ctrl+S 保存一下这份新鲜出炉的HelloWorld，接下来点击右上角出现的 <em><strong>“调试C/C++文件”</strong></em> 图标</p><p><img src="`+I+'" alt="env vscode settings" loading="lazy"></p><p>点击 <em><strong>C/C++: g++.exe 生成和调试活动文件</strong></em></p><p><img src="'+H+'" alt="env vscode settings" loading="lazy"></p><p>等待编译完成...然后...</p><p>庆贺罢！</p><p><img src="'+R+'" alt="env vscode settings" loading="lazy"></p><h2 id="尾声" tabindex="-1">尾声 <a class="header-anchor" href="#尾声" aria-label="Permalink to &quot;尾声&quot;">​</a></h2><p>至此，这篇基础教程也告一段落了，经过以上这些配置后，你应该可以在VSCode中愉快地编写C/C++代码了。</p><p>如果想要了解更多关于使用VSCode的进阶教程或是还有其他问题，可以前往百度，必应或谷歌搜索，或者查看微软官方详尽的教程文档（英文原版）<a href="https://code.visualstudio.com/docs" target="_blank" rel="noreferrer">Documentation for Visual Studio Code</a></p><p><em><strong>Good Luck &amp; Have Fun</strong></em></p><p><em><strong><code>:P</code></strong></em></p>',126);function $(O,j,J,X,K,Q){const s=a("NolebaseGitChangelog");return t(),e("div",null,[L,o(s)])}const ns=n(U,[["render",$]]);export{ss as __pageData,ns as default};
